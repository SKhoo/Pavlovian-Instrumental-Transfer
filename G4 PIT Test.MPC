\-------------------------------------------------------------------------
\ G4 PIT Test
\ Version: 1.15
\ Created by Shaun Khoo (9 July 2019)
\ >('.')<
\ http://orcid.org/0000-0002-0972-3788
\ License: MIT
\-------------------------------------------------------------------------

\CONTROL CONSTANTS
^SessionLength = 42	\Session length in minutes
^LeadInTime = 10	\Time before first cue in minutes
^ITI = 120		\ITI in seconds
^Timebins = 252		\Number of timebins
^CSDuration = 120	\Cue duration in seconds
^CSIdentity = 1		\CS+ identity, 1 = Tone, 2 = Clicker
^ClickerFreq = 10	\Clicker Frequency in Hz
^Trials = 4		\Number of trials for each cue
^InvertCueOrder = 0	\Whether to invert the listed cue order
			\i.e. when a tone is listed, present clicker
^ActiveLever = 1	\Active lever, set to 1 for left, 10 for right
^Version = 115		\Program version number

\INPUTS
^LeftLever = 1
^RightLever = 3
^Magazine = 4
^ActivityOne = 5
^ActivityTwo = 2
^ActivityThree = 7
^ActivityFour = 8

\OUTPUTS
^LeftOut = 1
^RightOut = 10
^LiquidDispenser = 2

^Pellet = 3
^LeftLight = 4
^RightLight = 5
^Tone = 6
^Houselight = 7
^Pump = 8
^Fan = 9
^Clicker = 12
	
\Z-PULSES
^PreCSplus = 1
^CSplus = 2
^PostCSplus = 3
^PreCSminus = 4
^CSminus = 5
^PostCSminus = 6
^PostPlusPreMinus = 7
^PostPlusPrePlus = 8
^PostMinusPrePlus = 9
^PostMinusPreMinus = 10
^ITItime = 12
^Shutdown = 13

\VARIABLES
\VARIABLES - DATA - Session Totals
DIM A = 64
\Active Lever Presses = A(0)
\Inactive Lever Presses = A(1)
\Magazine Entries = A(2)
\Total Activity = A(3)
\CS+ Trials Delivered = A(4)
\CS- Trials Delivered = A(5)
\Pre-CS+ Active Lever = A(6)
\CS+ Active Lever = A(7)
\Post-CS+ Active Lever = A(8)
\Pre-CS+ Inactive Lever = A(9)
\CS+ Inactive Lever = A(10)
\Post-CS+ Inactive Lever = A(11)
\Pre-CS+ Magazine Entries = A(12)
\CS+ Magazine Entries = A(13)
\Post-CS+ Magazine Entries = A(14)
\Pre-CS+ Total Activity = A(15)
\CS+ Total Activity = A(16)
\Post-CS+ Total Activity = A(17)
\Pre-CS- Active Lever = A(18)
\CS- Active Lever = A(19)
\Post-CS- Active Lever = A(20)
\Pre-CS- Inactive Lever = A(21)
\CS- Inactive Lever = A(22)
\Post-CS- Inactive Lever = A(23)
\Pre-CS- Magazine Entries = A(24)
\CS- Magazine Entries = A(25)
\Post-CS- Magazine Entries = A(26)
\Pre-CS- Total Activity = A(27)
\CS- Total Activity = A(28)
\Post-CS- Total Activity = A(29)
\Active Lever Latency = A(30)
\Inactive Lever Latency = A(31)
\Magazine Entry Latency = A(32)
\ActivityOne Total = A(33)
\ActivityTwo Total = A(34)
\ActivityThree Total = A(35)
\ActivityFour Total = A(36)
\ActivityOne Latency = A(37)
\ActivityTwo Latency = A(38)
\ActivityThree Latency = A(39)
\ActivityFour Latency = A(40)
\Pre-CS+ ActivityOne = A(41)
\CS+ ActivityOne = A(42)
\Post-CS+ ActivityOne = A(43)
\Pre-CS- ActivityOne = A(44)
\CS- ActivityOne = A(45)
\Post-CS- ActivityOne = A(46)
\Pre-CS+ ActivityTwo = A(47)
\CS+ ActivityTwo = A(48)
\Post-CS+ ActivityTwo = A(49)
\Pre-CS- ActivityTwo = A(50)
\CS- ActivityTwo = A(51)
\Post-CS- ActivityTwo = A(52)
\Pre-CS+ ActivityThree = A(53)
\CS+ ActivityThree = A(54)
\Post-CS+ ActivityThree = A(55)
\Pre-CS- ActivityThree = A(56)
\CS- ActivityThree = A(57)
\Post-CS- ActivityThree = A(58)
\Pre-CS+ ActivityFour = A(59)
\CS+ ActivityFour = A(60)
\Post-CS+ ActivityFour = A(61)
\Pre-CS- ActivityFour = A(62)
\CS- ActivityFour = A(63)
\Post-CS- ActivityFour = A(64)

\VARIABLES - DATA - Timecourse Arrays
DIM B = 50000	\Cue presentations,		subscript S/X(9)
DIM C = 50000	\Active Lever,			subscript S/X(10)
DIM D = 50000	\Inactive Lever,		subscript S/X(11)
DIM E = 50000	\Magazine Entries,		subscript S/X(12)
DIM F = 50000	\ActivityOne,			subscript S/X(13)
DIM G = 50000	\ActivityTwo,			subscript S/X(14)
DIM H = 50000	\ActivityThree,			subscript S/X(15)
DIM I = 50000	\ActivityFour,			subscript S/X(16)

\VARIABLES - DATA - Timebin Arrays
DIM J = 10000	\Active Lever,			subscript T
DIM K = 10000	\Inactive Lever,		subscript T
DIM L = 10000	\Magazine Entries,		subscript T
DIM M = 10000	\Total Activity,		subscript T
DIM N = 10000	\ActivityOne,			subscript T
DIM O = 10000	\ActivityTwo,			subscript T
DIM P = 10000	\ActivityThree,			subscript T
DIM Q = 10000	\ActivityFour,			subscript T

\VARIABLES - DATA - LATENCY ARRAYS
DIM R = 200	\Active Lever,			subscript W-1
DIM U = 200	\Inactive Lever,		subscript W-1
DIM V = 200	\Magazine Entries,		subscript W-1

\VARIABLES - CONTROL - WORKING VARIABLES
DIM X = 16
\X(0) = Session Clock (seconds)
\X(1) = Decisecond Clock
\X(2) = Timebin Clock
\X(3) = Current trial timer
\X(4) = Next trial timer
\X(5) = Current Trial
\X(6) = Trial Status
\X(7) = Last Beam Break Identity
\X(8) = Clicker On/Off Time
\X(9) = Subscript for B
\X(10) = Subscript for C
\X(11) = Subscript for D
\X(12) = Subscript for E
\X(13) = Subscript for F
\X(14) = Subscript for G
\X(15) = Subscript for H
\X(16) = Subscript for I

\VARIABLES - CONTROL - CUE DELIVERY
\Trial Cue Identity List, subscript W
LIST Y = 1, 2, 2, 1, 2, 1, 1, 2

\VARIABLES - CONTROL - SESSION PARAMETERS
DIM Z = 11
var_alias Session Length (min) = Z(0)
var_alias Lead-in Time (min) = Z(1)
var_alias Inter-Trial Interval (s) = Z(2)
var_alias Number of Timebins = Z(3)
var_alias CS Duration (s) = Z(4)
var_alias CS+ Identity (1Tone 2Clicker) = Z(5)
var_alias Clicker Frequency (Hz) = Z(6)
var_alias Trials per Cue = Z(7)
var_alias Invert Cue Order = Z(8)
var_alias Active Lever (1L 3R) = Z(9)
var_alias Inactive Lever (1L 3R) = Z(10)
var_alias Version = Z(11)

DISKVARS = A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, U, V, Y, Z
DISKOPTIONS = FULLHEADERS
DISKFORMAT = 16.3
DISKCOLUMNS = 1
Y2KCOMPLIANT

\-------------------------------------------------------------------------
\State Set 1 - Control Program

S.S.1,
S1, 	\State 1 shows the program has loaded.
	0.01": SET Z(11) = ^Version / 100;
	SHOW 1, Program Version, Z(11);

	\Set the variables according to the control constants
	SET Z(0) = ^SessionLength, Z(1) = ^LeadInTime, Z(2) = ^ITI;
	SET Z(3) = ^Timebins, Z(4) = ^CSDuration, Z(5) = ^CSIdentity;
	SET Z(6) = ^ClickerFreq, Z(7) = ^Trials, Z(8) = ^InvertCueOrder;
	SET Z(9) = ^ActiveLever;

	\Seal all arrays
	SET B(1) = -987.987, C(1) = -987.987, D(1) = -987.987;		\Timestamp recorders
	SET E(1) = -987.987, F(1) = -987.987, G(1) = -987.987;
	SET H(1) = -987.987, I(1) = -987.987;
	SET J(1) = -987.987, K(1) = -987.987, L(1) = -987.987;		\Timebin recorders
	SET M(1) = -987.987, N(1) = -987.987, O(1) = -987.987;
	SET P(1) = -987.987, Q(1) = -987.987;

	\Set the active lever
	IF Z(9) < 2 [@LeftActive, @RightActive]
		@LeftActive: SET Z(9) = ^LeftLever, Z(10) = ^RightLever ---> S2
		@RightActive: SET Z(9) = ^RightLever, Z(10) = ^LeftLever ---> S2

S2,	\State 2 waits for the start command
	#START: SHOW 1, Session Time, X(0); ON ^Houselight, ^Fan;

	\Set the program start time
	SET STARTHOURS = CURRENTHOURS;
	SET STARTMINUTES = CURRENTMINUTES, STARTSECONDS = CURRENTSECONDS;

	\Set default latencies
	SET B(0) = Z(0) * 60, C(0) = Z(0) * 60, D(0) = Z(0) * 60;
	SET E(0) = Z(0) * 60, F(0) = Z(0) * 60, G(0) = Z(0) * 60;
	SET H(0) = Z(0) * 60, I(0) = Z(0) * 60 ---> S3

S3,	\State 3 counts the session length in seconds
	1": ADD X(0); SHOW 1, Session Time, X(0);
	IF X(0) >= Z(0) * 60 [@SHUTDOWN, @CONTINUE]
		@SHUTDOWN: Z^Shutdown;
		SET A(30) = C(0), A(31) = D(0), A(32) = E(0);		\Transfer latency values to the A array
		SET A(37) = F(0), A(38) = G(0), A(39) = H(0);
		SET A(40) = I(0);
		OFF ^LeftOut, ^RightOut, ^Houselight, ^Fan ---> S4
		@CONTINUE: ---> SX

S4,	\State 4 waits for 1 second and closes the program
	1": ---> STOPABORTFLUSH

\-------------------------------------------------------------------------
\State Set 2 - Centisecond Timer

S.S.2,
S1,	\State 1 waits for the start command
	#START: ---> S2

S2,	\State 2 counts upwards in 10 ms increments
	0.01": SET X(1) = X(1) + 0.01;
	SET X(2) = X(2) + 0.01; 
	IF (X(2) / 60 >= (Z(0) / Z(3))) AND ((T + 1) < Z(3)) [@TRUE, @FALSE]
		@TRUE: SET X(2) = 0; ADD T;
		SET J(T) = 0, K(T) = 0, L(T) = 0, M(T) = 0;
		SET N(T) = 0, O(T) = 0, P(T) = 0, Q(T) = 0;
		SET J(T+1) = -987.987, K(T+1) = -987.987;
		SET L(T+1) = -987.987, M(T+1) = -987.987;
		SET N(T+1) = -987.987, O(T+1) = -987.987;
		SET P(T+1) = -987.987, Q(T+1) = -987.987 ---> SX
		@FALSE: ---> SX

	#Z^Shutdown: ---> S3

S3,	\State 3 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 3 - Trial Clocks

S.S.3,
S1,	\State  1 waits for the start command
	#START: SET X(5) = Y(W); ADD W;
	SET R(W) = -987.987, U(W) = -987.987, V(W) = -987.987;
	SET X(3) = Z(1) * 1' - Z(4) * 1";
	IF X(3) <= 0 [@NOLEADIN, @LEADIN]
		@NOLEADIN: IF Z(8) > 0.5 [@INVERT, @NULL]
			@INVERT: IF X(5) = Z(5) [@CSMINUS, @CSPLUS]
				@CSMINUS: Z^PreCSminus; SET X(4) = -Z(4) ---> S7
				@CSPLUS: Z^PreCSPlus; SET X(3) = -Z(4) ---> S4
			@NULL: IF X(5) = Z(5) [@CSPLUS, @CSMINUS]
				@CSPLUS: Z^PreCSPlus; SET X(3) = -Z(4) ---> S4
				@CSMINUS: Z^PreCSminus; SET X(4) = -Z(4) ---> S7
		@LEADIN: ---> S2

S2,	\State 2 waits out the lead-in time then checks if the trial
	\should be inverted and delivers the appropriate cue type
	X(3)#T: IF Z(8) > 0.5 [@INVERT, @NULL]
		@INVERT: IF X(5) = Z(5) [@CSMINUS, @CSPLUS]
			@CSMINUS: Z^PreCSminus; SET X(3) = -Z(4) ---> S7
			@CSPLUS: Z^PreCSPlus; SET X(3) = -Z(4) ---> S4
		@NULL: IF X(5) = Z(5) [@CSPLUS, @CSMINUS]
			@CSPLUS: Z^PreCSPlus; SET X(3) = -Z(4) ---> S4
			@CSMINUS: Z^PreCSminus; SET X(3) = -Z(4) ---> S7

S3,	\State 3 counts down an ITI
	0.01": SET X(3) = X(3) + 0.01;
	IF X(3) + 0.001 >= -Z(4) [@PRECS, @NULL]
		@PRECS: IF Z(8) > 0.5 [@INVERT, @NULL]
			@INVERT: IF X(5) = Z(5) [@CSMINUS, @CSPLUS]
				@CSMINUS: Z^PreCSminus; SET X(3) = -Z(4) ---> S7
				@CSPLUS: Z^PreCSPlus; SET X(3) = -Z(4) ---> S4
			@NULL: IF X(5) = Z(5) [@CSPLUS, @CSMINUS]
				@CSPLUS: Z^PreCSPlus; SET X(3) = -Z(4) ---> S4
				@CSMINUS: Z^PreCSminus; SET X(3) = -Z(4) ---> S7
		@NULL: ---> SX

S4,	\State 4 counts down the Pre-CS+
	0.01": SET X(3) = X(3) + 0.01;
	IF X(3) + 0.001 >= 0 [@CSPLUS, @WAIT]
		@CSPLUS: Z^CSPlus; ADD A(4) ---> S5
		@WAIT: ---> SX

S5,	\State 5 times the CS+
	0.01": SET X(3) = X(3) + 0.01;
	IF X(3) + 0.001 >= Z(4) [@POSTCS, @WAIT]
		@POSTCS: IF W < Z(7) * 2 [@CHECKTRIAL, @FINISHED]
			@CHECKTRIAL: SET X(5) = Y(W); SET R(W) = 0, U(W) = 0, V(W) = 0; ADD W;
			SET R(W) = -987.987, U(W) = -987.987, V(W) = -987.987;
			SET X(4) = - Z(2); IF Z(2) <= Z(4) [@PREPOST, @POST]
				@PREPOST: IF Z(8) > 0.5 [@INVERT, @NULL]
					@INVERT: IF X(5) = Z(5) [@CSMINUS, @CSPLUS]
						@CSMINUS: Z^PostPlusPreMinus; SET X(4) = -Z(4) ---> S10
						@CSPLUS: Z^PostPlusPrePlus; SET X(4) = -Z(4) ---> S11
					@NULL: IF X(5) = Z(5) [@CSPLUS, @CSMINUS]
						@CSPLUS: Z^PostPlusPrePlus; SET X(4) = -Z(4) ---> S11
						@CSMINUS: Z^PostPlusPreMinus; SET X(4) = -Z(4) ---> S10
				@POST: Z^PostCSplus ---> S6
			@FINISHED: SET X(4) = 0 - (Z(2) * 5) ---> S6
		@WAIT: ---> SX

S6,	\State 6 times the Post-CS+
	0.01": SET X(3) = X(3) + 0.01, X(4) = X(4) + 0.01;
	IF X(3) + 0.001 >= Z(4) * 2 [@ENDPOST, @CHECK]
		@ENDPOST: IF W < Z(7) * 2 [@NEXT, @END]
			@NEXT: SET X(3) = X(4); IF X(3) + 0.001 <= -Z(4) [@PRECS, @ITI]
				@PRECS: IF Z(8) > 0.5 [@INVERT, @NULL]
					@INVERT: IF X(5) = Z(5) [@CSMINUS, @CSPLUS]
						@CSMINUS: Z^PreCSminus ---> S7
						@CSPLUS: Z^PreCSPlus ---> S4
					@NULL: IF X(5) = Z(5) [@CSPLUS, @CSMINUS]
						@CSPLUS: Z^PreCSPlus ---> S4
						@CSMINUS: Z^PreCSminus ---> S7
				@ITI: Z^ITItime ---> S3
			@END: Z^ITItime ---> S14
		@CHECK: IF X(4) + 0.001 <= -Z(4) [@PRECS, @CONTINUE]
			@PRECS: IF Z(8) > 0.5 [@INVERT, @NULL]
				@INVERT: IF X(5) = Z(5) [@CSMINUS, @CSPLUS]
					@CSMINUS: Z^PostPlusPreMinus ---> S10
					@CSPLUS: Z^PostPlusPrePlus ---> S11
				@NULL: IF X(5) = Z(5) [@CSPLUS, @CSMINUS]
					@CSPLUS: Z^PostPlusPrePlus ---> S11
					@CSMINUS: Z^PostPlusPreMinus ---> S10
			@CONTINUE: ---> SX

S7,	\State 7 counts down the Pre-CS-
	0.01": SET X(3) = X(3) + 0.01;
	IF X(3) + 0.001 >= 0 [@CSMINUS, @WAIT]
		@CSMINUS: Z^CSMinus; ADD A(5) ---> S8
		@WAIT: ---> SX

S8,	\State 8 times the CS-
	0.01": SET X(3) = X(3) + 0.01;
	IF X(3) + 0.001 >= Z(4) [@POSTCS, @WAIT]
		@POSTCS: IF W < Z(7) * 2 [@CHECKTRIAL, @FINISHED]
			@CHECKTRIAL: SET X(5) = Y(W); SET R(W) = 0, U(W) = 0, V(W) = 0; ADD W;
			SET R(W) = -987.987, U(W) = -987.987, V(W) = -987.987; 
			SET X(4) = - Z(2); IF Z(2) <= Z(4) [@PREPOST, @POST]
				@PREPOST: IF Z(8) > 0.5 [@INVERT, @NULL]
					@INVERT: IF X(5) = Z(5) [@CSMINUS, @CSPLUS]
						@CSMINUS: Z^PostMinusPreMinus; SET X(4) = -Z(4) ---> S13
						@CSPLUS: Z^PostMinusPrePlus; SET X(4) = -Z(4) ---> S12
					@NULL: IF X(5) = Z(5) [@CSPLUS, @CSMINUS]
						@CSPLUS: Z^PostMinusPrePlus; SET X(4) = -Z(4) ---> S12
						@CSMINUS: Z^PostMinusPreMinus; SET X(4) = -Z(4) ---> S13
				@POST: Z^PostCSminus ---> S9
			@FINISHED: SET X(4) = 0 - (Z(2) * 5) ---> S9
		@WAIT: ---> SX

S9,	\State 9 times the Post-CS-
	0.01": SET X(3) = X(3) + 0.01, X(4) = X(4) + 0.01;
	IF X(3) + 0.001 >= Z(4) * 2 [@ENDPOST, @CHECK]
		@ENDPOST: IF W < Z(7) * 2 [@NEXT, @END]
			@NEXT: SET X(3) = X(4); IF X(3) + 0.001 <= -Z(4) [@PRECS, @ITI]
				@PRECS: IF Z(8) > 0.5 [@INVERT, @NULL]
					@INVERT: IF X(5) = Z(5) [@CSMINUS, @CSPLUS]
						@CSMINUS: Z^PreCSminus ---> S7
						@CSPLUS: Z^PreCSPlus ---> S4
					@NULL: IF X(5) = Z(5) [@CSPLUS, @CSMINUS]
						@CSPLUS: Z^PreCSPlus ---> S4
						@CSMINUS: Z^PreCSminus ---> S7
				@ITI: Z^ITItime ---> S3
			@END: Z^ITItime ---> S14
		@CHECK: IF X(4) + 0.001 <= -Z(4) [@PRECS, @CONTINUE]
			@PRECS: IF Z(8) > 0.5 [@INVERT, @NULL]
				@INVERT: IF X(5) = Z(5) [@CSMINUS, @CSPLUS]
					@CSMINUS: Z^PostMinusPreMinus ---> S13
					@CSPLUS: Z^PostMinusPrePlus ---> S12
				@NULL: IF X(5) = Z(5) [@CSPLUS, @CSMINUS]
					@CSPLUS: Z^PostMinusPrePlus ---> S12
					@CSMINUS: Z^PostMinusPreMinus ---> S13
			@CONTINUE: ---> SX

S10,	\State 10 times the Post-CS+ Pre-CS-
	0.01": SET X(3) = X(3) + 0.01, X(4) = X(4) + 0.01;
	IF X(3) + 0.001 >= Z(4) * 2 [@ENDPOST, @CHECK]
		@ENDPOST: IF X(4) + 0.001 >= 0 [@STARTCS, @ENDONLY]
			@STARTCS: Z^CSMinus; ADD A(5); SET X(3) = X(4) ---> S8
			@ENDONLY: Z^PreCSminus; SET X(3) = X(4) ---> S7
		@CHECK: IF X(4) + 0.001 >= 0 [@STARTCS, @WAIT]
			@STARTCS: Z^CSMinus; ADD A(5); SET X(3) = X(4) ---> S8
			@WAIT: ---> SX

S11,	\State 11 times the Post-CS+ Pre-CS+
	0.01": SET X(3) = X(3) + 0.01, X(4) = X(4) + 0.01;
	IF X(3) + 0.001 >= Z(4) * 2 [@ENDPOST, @CHECK]
		@ENDPOST: IF X(4) + 0.001 >= 0 [@STARTCS, @ENDONLY]
			@STARTCS: Z^CSplus; ADD A(4); SET X(3) = X(4) ---> S5
			@ENDONLY: Z^PreCSplus; SET X(3) = X(4) ---> S4
		@CHECK: IF X(4) + 0.001 >= 0 [@STARTCS, @WAIT]
			@STARTCS: Z^CSplus; ADD A(4); SET X(3) = X(4) ---> S5
			@WAIT: ---> SX

S12,	\State 12 times the Post-CS- Pre-CS+
	0.01": SET X(3) = X(3) + 0.01, X(4) = X(4) + 0.01;
	IF X(3) + 0.001 >= Z(4) * 2 [@ENDPOST, @CHECK]
		@ENDPOST: IF X(4) + 0.001 >= 0 [@STARTCS, @ENDONLY]
			@STARTCS: Z^CSplus; ADD A(4); SET X(3) = X(4) ---> S5
			@ENDONLY: Z^PreCSplus; SET X(3) = X(4) ---> S4
		@CHECK: IF X(4) + 0.001 >= 0 [@STARTCS, @WAIT]
			@STARTCS: Z^CSplus; ADD A(4); SET X(3) = X(4) ---> S5
			@WAIT: ---> SX

S13,	\State 13 times the Post-CS- PreCS-
	0.01": SET X(3) = X(3) + 0.01, X(4) = X(4) + 0.01;
	IF X(3) + 0.001 >= Z(4) * 2 [@ENDPOST, @CHECK]
		@ENDPOST: IF X(4) + 0.001 >= 0 [@STARTCS, @ENDONLY]
			@STARTCS: Z^CSMinus; ADD A(5); SET X(3) = X(4) ---> S8
			@ENDONLY: Z^PreCSminus; SET X(3) = X(4) ---> S7
		@CHECK: IF X(4) + 0.001 >= 0 [@STARTCS, @WAIT]
			@STARTCS: Z^CSMinus; ADD A(5); SET X(3) = X(4) ---> S8
			@WAIT: ---> SX

S14,	\State 14 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 4 - Cue Delivery

S.S.4,
S1,	\State 1 waits for the start command
	#START: SET X(8) = 1" / (Z(6) * 2) ---> S2

S2,	\State 2 waits for a CS Z-Pulse
	#Z^CSplus: SET S = X(9); SET B(S) = X(1); ADD X(9); SET S = X(9);
	SET B(S) = -987.987; IF Z(5) < 1.5 [@TONE, @CLICKER]
		@TONE: ON ^Tone ---> S3
		@CLICKER: ON ^Clicker ---> S4

	#Z^CSminus: SET S = X(9); SET B(S) = X(1); ADD X(9); SET S = X(9);
	SET B(S) = -987.987; IF Z(5) > 1.5 [@TONE, @CLICKER]
		@TONE: ON ^Tone ---> S3
		@CLICKER: ON ^Clicker ---> S4

	#Z^Shutdown: ---> S6

S3,	\State 3 waits to switch off the tone
	#Z^PostCSplus ! #Z^PostCSminus: OFF ^Tone ---> S2
	#Z^PostPlusPreMinus ! #Z^PostPlusPrePlus: OFF ^Tone ---> S2
	#Z^PostMinusPrePlus ! #Z^PostMinusPreMinus: OFF ^Tone ---> S2

	#Z^Shutdown: OFF ^Tone ---> S6

S4,	\State 4 cycles through the clicker
	X(8)#T: OFF ^Clicker ---> S5

	#Z^PostCSplus ! #Z^PostCSminus: OFF ^Clicker ---> S2
	#Z^PostPlusPreMinus ! #Z^PostPlusPrePlus: OFF ^Clicker ---> S2
	#Z^PostMinusPrePlus ! #Z^PostMinusPreMinus: OFF ^Clicker ---> S2

	#Z^Shutdown: OFF ^Clicker ---> S6

S5,	\State 5 cycles through the clicker
	X(8)#T: ON ^Clicker ---> S4

	#Z^PostCSplus ! #Z^PostCSminus: OFF ^Clicker ---> S2
	#Z^PostPlusPreMinus ! #Z^PostPlusPrePlus: OFF ^Clicker ---> S2
	#Z^PostMinusPrePlus ! #Z^PostMinusPreMinus: OFF ^Clicker ---> S2

	#Z^Shutdown: OFF ^Clicker ---> S6

S6,	\State 6 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 5 - Active Lever

S.S.5,
S1,	\State 1 waits for the start command
	#START: SHOW 2, Active Lever, A(0); ON ^LeftOut, ^RightOut ---> S2

S2,	\State 2 counts active lever presses during the ITI
	#RZ(9): ADD A(0), J(T); SET S = X(10); SET C(S) = X(1);
	ADD X(10); SET S = X(10); SET C(S) = -987.987;
	SHOW 2, Active Lever, A(0) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^PreCSminus: ---> S6

	#Z^Shutdown: ---> S13

S3,	\State 3 counts responses during the Pre-CS+
	#RZ(9): ADD A(0), J(T), A(6); SET S = X(10); SET C(S) = X(1);
	ADD X(10); SET S = X(10); SET C(S) = -987.987;
	SHOW 2, Active Lever, A(0) ---> SX

	#Z^CSplus: ---> S4

	#Z^Shutdown: ---> S13

S4,	\State 4 counts responses during the CS+
	#RZ(9): ADD A(0), J(T), A(7); SET S = X(10); SET C(S) = X(1);
	ADD X(10); SET S = X(10); SET C(S) = -987.987;
	SHOW 2, Active Lever, A(0);
	IF R(W-1) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET R(W-1) = X(3) ---> SX
		@IGNORE: ---> SX

	#Z^PostCSplus: IF R(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET R(W-2) = Z(4) ---> S5
		@IGNORE: ---> S5
	#Z^PostPlusPreMinus: IF R(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET R(W-2) = Z(4) ---> S9
		@IGNORE: ---> S9
	#Z^PostPlusPrePlus: IF R(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET R(W-2) = Z(4) ---> S10
		@IGNORE: ---> S10

	#Z^Shutdown: ---> S13

S5,	\State 5 counts responses during the Post-CS+
	#RZ(9): ADD A(0), J(T), A(8); SET S = X(10); SET C(S) = X(1);
	ADD X(10); SET S = X(10); SET C(S) = -987.987;
	SHOW 2, Active Lever, A(0) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^PreCSminus: ---> S6
	#Z^PostPlusPreMinus: ---> S9
	#Z^PostPlusPrePlus: ---> S10
	#Z^ITItime: ---> S2

	#Z^Shutdown: ---> S13

S6,	\State 6 counts responses during the Pre-CS-
	#RZ(9): ADD A(0), J(T), A(18); SET S = X(10); SET C(S) = X(1);
	ADD X(10); SET S = X(10); SET C(S) = -987.987;
	SHOW 2, Active Lever, A(0) ---> SX

	#Z^CSminus: ---> S7

	#Z^Shutdown: ---> S13

S7,	\State 7 counts responses during the CS-
	#RZ(9): ADD A(0), J(T), A(19); SET S = X(10); SET C(S) = X(1);
	ADD X(10); SET S = X(10); SET C(S) = -987.987;
	SHOW 2, Active Lever, A(0);
	IF R(W-1) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET R(W-1) = -X(3) ---> SX
		@IGNORE: ---> SX

	#Z^PostCSminus: IF R(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET R(W-2) = -Z(4) ---> S8
		@IGNORE: ---> S8
	#Z^PostMinusPrePlus: IF R(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET R(W-2) = -Z(4) ---> S11
		@IGNORE: ---> S11
	#Z^PostMinusPreMinus: IF R(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET R(W-2) = -Z(4) ---> S12
		@IGNORE: ---> S12

	#Z^Shutdown: ---> S13

S8,	\State 8 counts responses during the Post-CS-
	#RZ(9): ADD A(0), J(T), A(20); SET S = X(10); SET C(S) = X(1);
	ADD X(10); SET S = X(10); SET C(S) = -987.987;
	SHOW 2, Active Lever, A(0) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^PreCSminus: ---> S6
	#Z^PostMinusPrePlus: ---> S11
	#Z^PostMinusPreMinus: ---> S12
	#Z^ITItime: ---> S2

	#Z^Shutdown: ---> S13

S9,	\State 9 counts responses during the Post-CS+ Pre-CS-
	#RZ(9): ADD A(0), J(T), A(8), A(18); SET S = X(10); SET C(S) = X(1);
	ADD X(10); SET S = X(10); SET C(S) = -987.987;
	SHOW 2, Active Lever, A(0) ---> SX

	#Z^PreCSminus: ---> S6
	#Z^CSminus: ---> S7

	#Z^Shutdown: ---> S13

S10,	\State 10 counts responses during the Post-CS+ Pre-CS+
	#RZ(9): ADD A(0), J(T), A(8), A(6); SET S = X(10); SET C(S) = X(1);
	ADD X(10); SET S = X(10); SET C(S) = -987.987;
	SHOW 2, Active Lever, A(0) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^CSplus: ---> S4

	#Z^Shutdown: ---> S13

S11,	\State 11 counts responses during the Post-CS- Pre-CS+
	#RZ(9): ADD A(0), J(T), A(20), A(6); SET S = X(10); SET C(S) = X(1);
	ADD X(10); SET S = X(10); SET C(S) = -987.987;
	SHOW 2, Active Lever, A(0) ---> SX

	#Z^PreCSminus: ---> S6
	#Z^CSplus: ---> S4

	#Z^Shutdown: ---> S13

S12,	\State 12 counts responses during the Post-CS- PreCS-
	#RZ(9): ADD A(0), J(T), A(20), A(18); SET S = X(10); SET C(S) = X(1);
	ADD X(10); SET S = X(10); SET C(S) = -987.987;
	SHOW 2, Active Lever, A(0) ---> SX

	#Z^PreCSminus: ---> S6
	#Z^CSminus: ---> S7

	#Z^Shutdown: ---> S13

S13,	\State 13 is a holding state
	#START: ---> SX
\-------------------------------------------------------------------------
\State Set 6 - Inactive Lever

S.S.6,
S1,	\State 1 waits for the start command
	#START: SHOW 3, Inactive Lever, A(1) ---> S2

S2,	\State 2 counts inactive lever presses during the ITI
	#RZ(10): ADD A(1), K(T); SET S = X(11); SET D(S) = X(1);
	ADD X(11); SET S = X(11); SET D(S) = -987.987;
	SHOW 3, Inactive Lever, A(1) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^PreCSminus: ---> S6

	#Z^Shutdown: ---> S13

S3,	\State 3 counts responses during the Pre-CS+
	#RZ(10): ADD A(1), K(T), A(9); SET S = X(11); SET D(S) = X(1);
	ADD X(11); SET S = X(11); SET D(S) = -987.987;
	SHOW 3, Inactive Lever, A(1) ---> SX

	#Z^CSplus: ---> S4

	#Z^Shutdown: ---> S13

S4,	\State 4 counts responses during the CS+
	#RZ(10): ADD A(1), K(T), A(10); SET S = X(11); SET D(S) = X(1);
	ADD X(11); SET S = X(11); SET D(S) = -987.987;
	SHOW 3, Inactive Lever, A(1);
	IF U(W-1) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET U(W-1) = X(3) ---> SX
		@IGNORE: ---> SX

	#Z^PostCSplus: IF U(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET U(W-2) = Z(4) ---> S5
		@IGNORE: ---> S5
	#Z^PostPlusPreMinus: IF U(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET U(W-2) = Z(4) ---> S9
		@IGNORE: ---> S9
	#Z^PostPlusPrePlus: IF U(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET U(W-2) = Z(4) ---> S10
		@IGNORE: ---> S10

	#Z^Shutdown: ---> S13

S5,	\State 5 counts responses during the Post-CS+
	#RZ(10): ADD A(1), K(T), A(11); SET S = X(11); SET D(S) = X(1);
	ADD X(11); SET S = X(11); SET D(S) = -987.987;
	SHOW 3, Inactive Lever, A(1) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^PreCSminus: ---> S6
	#Z^PostPlusPreMinus: ---> S9
	#Z^PostPlusPrePlus: ---> S10
	#Z^ITItime: ---> S2

	#Z^Shutdown: ---> S13

S6,	\State 6 counts responses during the Pre-CS-
	#RZ(10): ADD A(1), K(T), A(21); SET S = X(11); SET D(S) = X(1);
	ADD X(11); SET S = X(11); SET D(S) = -987.987;
	SHOW 3, Inactive Lever, A(1) ---> SX

	#Z^CSminus: ---> S7

	#Z^Shutdown: ---> S13

S7,	\State 7 counts responses during the CS-
	#RZ(10): ADD A(1), K(T), A(22); SET S = X(11); SET D(S) = X(1);
	ADD X(11); SET S = X(11); SET D(S) = -987.987;
	SHOW 3, Inactive Lever, A(1);
	IF U(W-1) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET U(W-1) = -X(3) ---> SX
		@IGNORE: ---> SX

	#Z^PostCSminus: IF U(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET U(W-2) = -Z(4) ---> S8
		@IGNORE: ---> S8
	#Z^PostMinusPrePlus: IF U(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET U(W-2) = -Z(4) ---> S11
		@IGNORE: ---> S11
	#Z^PostMinusPreMinus: IF U(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET U(W-2) = -Z(4) ---> S12
		@IGNORE: ---> S12

	#Z^Shutdown: ---> S13

S8,	\State 8 counts responses during the Post-CS-
	#RZ(10): ADD A(1), K(T), A(23); SET S = X(11); SET D(S) = X(1);
	ADD X(11); SET S = X(11); SET D(S) = -987.987;
	SHOW 3, Inactive Lever, A(1) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^PreCSminus: ---> S6
	#Z^PostMinusPrePlus: ---> S11
	#Z^PostMinusPreMinus: ---> S12
	#Z^ITItime: ---> S2

	#Z^Shutdown: ---> S13

S9,	\State 9 counts responses during the Post-CS+ Pre-CS-
	#RZ(10): ADD A(1), K(T), A(11), A(21); SET S = X(11); SET D(S) = X(1);
	ADD X(11); SET S = X(11); SET D(S) = -987.987;
	SHOW 3, Inactive Lever, A(1) ---> SX

	#Z^PreCSminus: ---> S6
	#Z^CSminus: ---> S7

	#Z^Shutdown: ---> S13

S10,	\State 10 counts responses during the Post-CS+ Pre-CS+
	#RZ(10): ADD A(1), K(T), A(11), A(9); SET S = X(11); SET D(S) = X(1);
	ADD X(11); SET S = X(11); SET D(S) = -987.987;
	SHOW 3, Inactive Lever, A(1) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^CSplus: ---> S4

	#Z^Shutdown: ---> S13

S11,	\State 11 counts responses during the Post-CS- Pre-CS+
	#RZ(10): ADD A(1), K(T), A(23), A(9); SET S = X(11); SET D(S) = X(1);
	ADD X(11); SET S = X(11); SET D(S) = -987.987;
	SHOW 3, Inactive Lever, A(1) ---> SX

	#Z^PreCSminus: ---> S6
	#Z^CSplus: ---> S4

	#Z^Shutdown: ---> S13

S12,	\State 12 counts responses during the Post-CS- PreCS-
	#RZ(10): ADD A(1), K(T), A(23), A(21); SET S = X(11); SET D(S) = X(1);
	ADD X(11); SET S = X(11); SET D(S) = -987.987;
	SHOW 3, Inactive Lever, A(1) ---> SX

	#Z^PreCSminus: ---> S6
	#Z^CSminus: ---> S7

	#Z^Shutdown: ---> S13

S13,	\State 13 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 7 - Magazine Entries

S.S.7,
S1,	\State 1 waits for the start command
	#START: SHOW 4, Magazine Entries, A(2) ---> S2

S2,	\State 2 counts magazine entries during the ITI
	#R^Magazine: ADD A(2), L(T); SET S = X(12); SET E(S) = X(1);
	ADD X(12); SET S = X(12); SET E(S) = -987.987;
	SHOW 4, Magazine Entries, A(2) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^PreCSminus: ---> S6

	#Z^Shutdown: ---> S13

S3,	\State 3 counts responses during the Pre-CS+
	#R^Magazine: ADD A(2), L(T), A(12); SET S = X(12); SET E(S) = X(1);
	ADD X(12); SET S = X(12); SET E(S) = -987.987;
	SHOW 4, Magazine Entries, A(2) ---> SX

	#Z^CSplus: ---> S4

	#Z^Shutdown: ---> S13

S4,	\State 4 counts responses during the CS+
	#R^Magazine: ADD A(2), L(T), A(13); SET S = X(12); SET E(S) = X(1);
	ADD X(12); SET S = X(12); SET E(S) = -987.987;
	SHOW 4, Magazine Entries, A(2);
	IF V(W-1) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET V(W-1) = X(3) ---> SX
		@IGNORE: ---> SX

	#Z^PostCSplus: IF V(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET V(W-2) = Z(4) ---> S5
		@IGNORE: ---> S5
	#Z^PostPlusPreMinus: IF V(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET V(W-2) = Z(4) ---> S9
		@IGNORE: ---> S9
	#Z^PostPlusPrePlus: IF V(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET V(W-2) = Z(4) ---> S10
		@IGNORE: ---> S10

	#Z^Shutdown: ---> S13

S5,	\State 5 counts responses during the Post-CS+
	#R^Magazine: ADD A(2), L(T), A(14); SET S = X(12); SET E(S) = X(1);
	ADD X(12); SET S = X(12); SET E(S) = -987.987;
	SHOW 4, Magazine Entries, A(2) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^PreCSminus: ---> S6
	#Z^PostPlusPreMinus: ---> S9
	#Z^PostPlusPrePlus: ---> S10
	#Z^ITItime: ---> S2

	#Z^Shutdown: ---> S13

S6,	\State 6 counts responses during the Pre-CS-
	#R^Magazine: ADD A(2), L(T), A(24); SET S = X(12); SET E(S) = X(1);
	ADD X(12); SET S = X(12); SET E(S) = -987.987;
	SHOW 4, Magazine Entries, A(2) ---> SX

	#Z^CSminus: ---> S7

	#Z^Shutdown: ---> S13

S7,	\State 7 counts responses during the CS-
	#R^Magazine: ADD A(2), L(T), A(25); SET S = X(12); SET E(S) = X(1);
	ADD X(12); SET S = X(12); SET E(S) = -987.987;
	SHOW 4, Magazine Entries, A(2);
	IF V(W-1) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET V(W-1) = -X(3) ---> SX
		@IGNORE: ---> SX

	#Z^PostCSminus: IF V(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET V(W-2) = -Z(4) ---> S8
		@IGNORE: ---> S8
	#Z^PostMinusPrePlus: IF V(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET V(W-2) = -Z(4) ---> S11
		@IGNORE: ---> S11
	#Z^PostMinusPreMinus: IF V(W-2) = 0 [@LATENCY, @IGNORE]
		@LATENCY: SET V(W-2) = -Z(4) ---> S12
		@IGNORE: ---> S12

	#Z^Shutdown: ---> S13

S8,	\State 8 counts responses during the Post-CS-
	#R^Magazine: ADD A(2), L(T), A(26); SET S = X(12); SET E(S) = X(1);
	ADD X(12); SET S = X(12); SET E(S) = -987.987;
	SHOW 4, Magazine Entries, A(2) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^PreCSminus: ---> S6
	#Z^PostMinusPrePlus: ---> S11
	#Z^PostMinusPreMinus: ---> S12
	#Z^ITItime: ---> S2

	#Z^Shutdown: ---> S13

S9,	\State 9 counts responses during the Post-CS+ Pre-CS-
	#R^Magazine: ADD A(2), L(T), A(14), A(24); SET S = X(12); SET E(S) = X(1);
	ADD X(12); SET S = X(12); SET E(S) = -987.987;
	SHOW 4, Magazine Entries, A(2) ---> SX

	#Z^PreCSminus: ---> S6
	#Z^CSminus: ---> S7

	#Z^Shutdown: ---> S13

S10,	\State 10 counts responses during the Post-CS+ Pre-CS+
	#R^Magazine: ADD A(2), L(T), A(14), A(12); SET S = X(12); SET E(S) = X(1);
	ADD X(12); SET S = X(12); SET E(S) = -987.987;
	SHOW 4, Magazine Entries, A(2) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^CSplus: ---> S4

	#Z^Shutdown: ---> S13

S11,	\State 11 counts responses during the Post-CS- Pre-CS+
	#R^Magazine: ADD A(2), L(T), A(26), A(12); SET S = X(12); SET E(S) = X(1);
	ADD X(12); SET S = X(12); SET E(S) = -987.987;
	SHOW 4, Magazine Entries, A(2) ---> SX

	#Z^PreCSminus: ---> S6
	#Z^CSplus: ---> S4

	#Z^Shutdown: ---> S13

S12,	\State 12 counts responses during the Post-CS- PreCS-
	#R^Magazine: ADD A(2), L(T), A(26), A(24); SET S = X(12); SET E(S) = X(1);
	ADD X(12); SET S = X(12); SET E(S) = -987.987;
	SHOW 4, Magazine Entries, A(2) ---> SX

	#Z^PreCSminus: ---> S6
	#Z^CSminus: ---> S7

	#Z^Shutdown: ---> S13

S13,	\State 13 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 8 - Locomotor Activity

S.S.8,
S1,	\State 1 waits for the start command
	#START: SHOW 5, Locomotor Counts, A(3) ---> S2

S2,	\State 2 counts locomotor beam breaks during the ITI
	#R^ActivityOne: IF X(7) = ^ActivityOne [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityOne;
		ADD A(3), A(33), M(T), N(T); SET S = X(13);
		SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityTwo: IF X(7) = ^ActivityTwo [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityTwo;
		ADD A(3), A(34), M(T), O(T); SET S = X(14);
		SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityThree: IF X(7) = ^ActivityThree [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityThree;
		ADD A(3), A(35), M(T), P(T); SET S = X(15);
		SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityFour: IF X(7) = ^ActivityFour [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityFour;
		ADD A(3), A(36), M(T), Q(T); SET S = X(16);
		SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^PreCSminus: ---> S6

	#Z^Shutdown: ---> S13

S3,	\State 3 counts responses during the Pre-CS+
	#R^ActivityOne: IF X(7) = ^ActivityOne [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityOne;
		ADD A(3), A(33), M(T), N(T), A(15), A(41); SET S = X(13);
		SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityTwo: IF X(7) = ^ActivityTwo [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityTwo;
		ADD A(3), A(34), M(T), O(T), A(15), A(47); SET S = X(14);
		SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityThree: IF X(7) = ^ActivityThree [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityThree;
		ADD A(3), A(35), M(T), P(T), A(15), A(53); SET S = X(15);
		SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityFour: IF X(7) = ^ActivityFour [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityFour;
		ADD A(3), A(36), M(T), Q(T), A(15), A(59); SET S = X(16);
		SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#Z^CSplus: ---> S4

	#Z^Shutdown: ---> S13

S4,	\State 4 counts responses during the CS+
	#R^ActivityOne: IF X(7) = ^ActivityOne [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityOne;
		ADD A(3), A(33), M(T), N(T), A(16), A(42); SET S = X(13);
		SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityTwo: IF X(7) = ^ActivityTwo [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityTwo;
		ADD A(3), A(34), M(T), O(T), A(16), A(48); SET S = X(14);
		SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityThree: IF X(7) = ^ActivityThree [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityThree;
		ADD A(3), A(35), M(T), P(T), A(16), A(54); SET S = X(15);
		SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityFour: IF X(7) = ^ActivityFour [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityFour;
		ADD A(3), A(36), M(T), Q(T), A(16), A(60); SET S = X(16);
		SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#Z^PostCSplus: ---> S5
	#Z^PostPlusPreMinus: ---> S9
	#Z^PostPlusPrePlus: ---> S10

	#Z^Shutdown: ---> S13

S5,	\State 5 counts responses during the Post-CS+
	#R^ActivityOne: IF X(7) = ^ActivityOne [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityOne;
		ADD A(3), A(33), M(T), N(T), A(17), A(43); SET S = X(13);
		SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityTwo: IF X(7) = ^ActivityTwo [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityTwo;
		ADD A(3), A(34), M(T), O(T), A(17), A(49); SET S = X(14);
		SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityThree: IF X(7) = ^ActivityThree [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityThree;
		ADD A(3), A(35), M(T), P(T), A(17), A(55); SET S = X(15);
		SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityFour: IF X(7) = ^ActivityFour [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityFour;
		ADD A(3), A(36), M(T), Q(T), A(17), A(61); SET S = X(16);
		SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^PreCSminus: ---> S6
	#Z^PostPlusPreMinus: ---> S9
	#Z^PostPlusPrePlus: ---> S10
	#Z^ITItime: ---> S2

	#Z^Shutdown: ---> S13

S6,	\State 6 counts responses during the Pre-CS-
	#R^ActivityOne: IF X(7) = ^ActivityOne [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityOne;
		ADD A(3), A(33), M(T), N(T), A(27), A(44); SET S = X(13);
		SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityTwo: IF X(7) = ^ActivityTwo [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityTwo;
		ADD A(3), A(34), M(T), O(T), A(27), A(50); SET S = X(14);
		SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityThree: IF X(7) = ^ActivityThree [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityThree;
		ADD A(3), A(35), M(T), P(T), A(27), A(56); SET S = X(15);
		SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityFour: IF X(7) = ^ActivityFour [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityFour;
		ADD A(3), A(36), M(T), Q(T), A(27), A(62); SET S = X(16);
		SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#Z^CSminus: ---> S7

	#Z^Shutdown: ---> S13

S7,	\State 7 counts responses during the CS-
	#R^ActivityOne: IF X(7) = ^ActivityOne [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityOne;
		ADD A(3), A(33), M(T), N(T), A(28), A(45); SET S = X(13);
		SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityTwo: IF X(7) = ^ActivityTwo [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityTwo;
		ADD A(3), A(34), M(T), O(T), A(28), A(51); SET S = X(14);
		SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityThree: IF X(7) = ^ActivityThree [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityThree;
		ADD A(3), A(35), M(T), P(T), A(28), A(57); SET S = X(15);
		SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityFour: IF X(7) = ^ActivityFour [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityFour;
		ADD A(3), A(36), M(T), Q(T), A(28), A(63); SET S = X(16);
		SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#Z^PostCSminus: ---> S8
	#Z^PostMinusPrePlus: ---> S11
	#Z^PostMinusPreMinus: ---> S12

	#Z^Shutdown: ---> S13

S8,	\State 8 counts responses during the Post-CS-
	#R^ActivityOne: IF X(7) = ^ActivityOne [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityOne;
		ADD A(3), A(33), M(T), N(T), A(29), A(46); SET S = X(13);
		SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityTwo: IF X(7) = ^ActivityTwo [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityTwo;
		ADD A(3), A(34), M(T), O(T), A(29), A(52); SET S = X(14);
		SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityThree: IF X(7) = ^ActivityThree [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityThree;
		ADD A(3), A(35), M(T), P(T), A(29), A(58); SET S = X(15);
		SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityFour: IF X(7) = ^ActivityFour [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityFour;
		ADD A(3), A(36), M(T), Q(T), A(29), A(64); SET S = X(16);
		SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^PreCSminus: ---> S6
	#Z^PostMinusPrePlus: ---> S11
	#Z^PostMinusPreMinus: ---> S12
	#Z^ITItime: ---> S2

	#Z^Shutdown: ---> S13

S9,	\State 9 counts responses during the Post-CS+ Pre-CS-
	#R^ActivityOne: IF X(7) = ^ActivityOne [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityOne;
		ADD A(3), A(33), M(T), N(T), A(17), A(27), A(43), A(44); SET S = X(13);
		SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityTwo: IF X(7) = ^ActivityTwo [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityTwo;
		ADD A(3), A(34), M(T), O(T), A(17), A(27), A(49), A(50); SET S = X(14);
		SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityThree: IF X(7) = ^ActivityThree [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityThree;
		ADD A(3), A(35), M(T), P(T), A(17), A(27), A(55), A(56); SET S = X(15);
		SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityFour: IF X(7) = ^ActivityFour [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityFour;
		ADD A(3), A(36), M(T), Q(T), A(17), A(27), A(61), A(62); SET S = X(16);
		SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#Z^PreCSminus: ---> S6
	#Z^CSminus: ---> S7

	#Z^Shutdown: ---> S13

S10,	\State 10 counts responses during the Post-CS+ Pre-CS+
	#R^ActivityOne: IF X(7) = ^ActivityOne [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityOne;
		ADD A(3), A(33), M(T), N(T), A(17), A(15), A(43), A(41); SET S = X(13);
		SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityTwo: IF X(7) = ^ActivityTwo [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityTwo;
		ADD A(3), A(34), M(T), O(T), A(17), A(15), A(49), A(47); SET S = X(14);
		SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityThree: IF X(7) = ^ActivityThree [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityThree;
		ADD A(3), A(35), M(T), P(T), A(17), A(15), A(55), A(53); SET S = X(15);
		SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityFour: IF X(7) = ^ActivityFour [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityFour;
		ADD A(3), A(36), M(T), Q(T), A(17), A(15), A(61), A(59); SET S = X(16);
		SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#Z^PreCSplus: ---> S3
	#Z^CSplus: ---> S4

	#Z^Shutdown: ---> S13

S11,	\State 11 counts responses during the Post-CS- Pre-CS+
	#R^ActivityOne: IF X(7) = ^ActivityOne [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityOne;
		ADD A(3), A(33), M(T), N(T), A(29), A(15), A(46), A(41); SET S = X(13);
		SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityTwo: IF X(7) = ^ActivityTwo [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityTwo;
		ADD A(3), A(34), M(T), O(T), A(29), A(15), A(52), A(47); SET S = X(14);
		SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityThree: IF X(7) = ^ActivityThree [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityThree;
		ADD A(3), A(35), M(T), P(T), A(29), A(15), A(58), A(53); SET S = X(15);
		SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityFour: IF X(7) = ^ActivityFour [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityFour;
		ADD A(3), A(36), M(T), Q(T), A(29), A(15), A(64), A(59); SET S = X(16);
		SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#Z^PreCSminus: ---> S6
	#Z^CSplus: ---> S4

	#Z^Shutdown: ---> S13

S12,	\State 12 counts responses during the Post-CS- PreCS-
	#R^ActivityOne: IF X(7) = ^ActivityOne [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityOne;
		ADD A(3), A(33), M(T), N(T), A(29), A(27), A(46), A(44); SET S = X(13);
		SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityTwo: IF X(7) = ^ActivityTwo [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityTwo;
		ADD A(3), A(34), M(T), O(T), A(29), A(27), A(52), A(50); SET S = X(14);
		SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityThree: IF X(7) = ^ActivityThree [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityThree;
		ADD A(3), A(35), M(T), P(T), A(29), A(27), A(58), A(56); SET S = X(15);
		SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#R^ActivityFour: IF X(7) = ^ActivityFour [@NOCOUNT, @COUNT]
		@NOCOUNT: ---> SX
		@COUNT: SET X(7) = ^ActivityFour;
		ADD A(3), A(36), M(T), Q(T), A(29), A(27), A(64), A(62); SET S = X(16);
		SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
		SHOW 5, Locomotor Counts, A(3) ---> SX

	#Z^PreCSminus: ---> S6
	#Z^CSminus: ---> S7

	#Z^Shutdown: ---> S13

S13,	\State 13 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 9 - Pre-Session Screen Updater

S.S.9,
S1,	\State updates the screen before session start
	#START: ---> S2

	1": IF S.S.1 <= 2 [@SHOW, @SKIP]
	@SHOW: SHOW 1, Session Length (min), Z(0);
	SHOW 2, Min to Trial 1, Z(1);
	SHOW 3, ITI (s), Z(2);
	SHOW 4, CS Duration (s), Z(4);
	SHOW 5, Trials per Cue, Z(7) ---> SX
	@SKIP:  ---> S2

S2,	\State 2 is a holding state
	#START: ---> SX